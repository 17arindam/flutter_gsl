// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for GSL
class flutter_gsl {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  flutter_gsl(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  flutter_gsl.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  double gsl_bessel_j0(
    double x,
  ) {
    return _gsl_bessel_j0(
      x,
    );
  }

  late final _gsl_bessel_j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_bessel_j0');
  late final _gsl_bessel_j0 =
      _gsl_bessel_j0Ptr.asFunction<double Function(double)>();

  double gsl_bessel_j1(
    double x,
  ) {
    return _gsl_bessel_j1(
      x,
    );
  }

  late final _gsl_bessel_j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_bessel_j1');
  late final _gsl_bessel_j1 =
      _gsl_bessel_j1Ptr.asFunction<double Function(double)>();

  double gsl_bessel_y0(
    double x,
  ) {
    return _gsl_bessel_y0(
      x,
    );
  }

  late final _gsl_bessel_y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_bessel_y0');
  late final _gsl_bessel_y0 =
      _gsl_bessel_y0Ptr.asFunction<double Function(double)>();

  double gsl_bessel_y1(
    double x,
  ) {
    return _gsl_bessel_y1(
      x,
    );
  }

  late final _gsl_bessel_y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_bessel_y1');
  late final _gsl_bessel_y1 =
      _gsl_bessel_y1Ptr.asFunction<double Function(double)>();

  double gsl_sf_sin(
    double x,
  ) {
    return _gsl_sf_sin(
      x,
    );
  }

  late final _gsl_sf_sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_sin');
  late final _gsl_sf_sin = _gsl_sf_sinPtr.asFunction<double Function(double)>();
}
